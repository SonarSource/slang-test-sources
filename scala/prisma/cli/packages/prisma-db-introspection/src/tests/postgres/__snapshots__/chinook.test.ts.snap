// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Introspector large example database 1`] = `
Object {
  "numTables": 11,
  "sdl": "type Album @pgTable(name: \\"Album\\") {
  id: Int! @unique @pgColumn(name: \\"AlbumId\\")
  Artist: Artist @pgRelation(column: \\"ArtistId\\")
  Title: String!
  Tracks: [Track!]!
}

type Artist @pgTable(name: \\"Artist\\") {
  id: Int! @unique @pgColumn(name: \\"ArtistId\\")
  Albums: [Album!]!
  Name: String
}

type Customer @pgTable(name: \\"Customer\\") {
  id: Int! @unique @pgColumn(name: \\"CustomerId\\")
  Address: String
  City: String
  Company: String
  Country: String
  Email: String!
  Fax: String
  FirstName: String!
  Invoices: [Invoice!]!
  LastName: String!
  Phone: String
  PostalCode: String
  State: String
  SupportRep: Employee @pgRelation(column: \\"SupportRepId\\")
}

type Employee @pgTable(name: \\"Employee\\") {
  id: Int! @unique @pgColumn(name: \\"EmployeeId\\")
  Address: String
  BirthDate: DateTime
  City: String
  Country: String
  Customers: [Customer!]!
  Email: String
  Employees: [Employee!]! @relation(name: \\"Employees\\")
  Fax: String
  FirstName: String!
  HireDate: DateTime
  LastName: String!
  Phone: String
  PostalCode: String
  ReportsTo: Employee @pgRelation(column: \\"ReportsTo\\") @relation(name: \\"EmployeesReportsTos\\")
  State: String
  Title: String
}

type Genre @pgTable(name: \\"Genre\\") {
  id: Int! @unique @pgColumn(name: \\"GenreId\\")
  Name: String
  Tracks: [Track!]!
}

type Invoice @pgTable(name: \\"Invoice\\") {
  id: Int! @unique @pgColumn(name: \\"InvoiceId\\")
  BillingAddress: String
  BillingCity: String
  BillingCountry: String
  BillingPostalCode: String
  BillingState: String
  Customer: Customer @pgRelation(column: \\"CustomerId\\")
  InvoiceDate: DateTime!
  InvoiceLines: [InvoiceLine!]!
  Total: Float!
}

type InvoiceLine @pgTable(name: \\"InvoiceLine\\") {
  id: Int! @unique @pgColumn(name: \\"InvoiceLineId\\")
  Invoice: Invoice @pgRelation(column: \\"InvoiceId\\")
  Quantity: Int!
  Track: Track @pgRelation(column: \\"TrackId\\")
  UnitPrice: Float!
}

type MediaType @pgTable(name: \\"MediaType\\") {
  id: Int! @unique @pgColumn(name: \\"MediaTypeId\\")
  Name: String
  Tracks: [Track!]!
}

type Playlist @pgTable(name: \\"Playlist\\") {
  id: Int! @unique @pgColumn(name: \\"PlaylistId\\")
  Name: String
  PlaylistTracks: [PlaylistTrack!]!
}

type PlaylistTrack @pgTable(name: \\"PlaylistTrack\\") {
  Playlist: Playlist @pgRelation(column: \\"PlaylistId\\")
  Track: Track @pgRelation(column: \\"TrackId\\")
}

type Track @pgTable(name: \\"Track\\") {
  id: Int! @unique @pgColumn(name: \\"TrackId\\")
  Album: Album @pgRelation(column: \\"AlbumId\\")
  Bytes: Int
  Composer: String
  Genre: Genre @pgRelation(column: \\"GenreId\\")
  InvoiceLines: [InvoiceLine!]!
  MediaType: MediaType @pgRelation(column: \\"MediaTypeId\\")
  Milliseconds: Int!
  Name: String!
  PlaylistTracks: [PlaylistTrack!]!
  UnitPrice: Float!
}",
}
`;
