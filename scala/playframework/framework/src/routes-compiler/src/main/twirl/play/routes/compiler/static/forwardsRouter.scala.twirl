@import play.routes.compiler._
@import play.routes.compiler.templates._
@(sourceInfo: RoutesSourceInfo, pkg: Option[String], imports: Seq[String], rules: Seq[Rule])
// @@GENERATOR:play-routes-compiler
// @@SOURCE:@sourceInfo.source
// @@DATE:@sourceInfo.date

@for(p <- pkg) {package @p}

import play.api.routing.HandlerDef
import play.core.routing._
import play.core.routing.HandlerInvokerFactory._

import play.api.mvc._
@for(i <- imports) {
import @if(!i.startsWith("_root_.")){_root_.}@i}

object Routes extends Routes

class Routes extends GeneratedRouter {

  override val errorHandler: play.api.http.HttpErrorHandler = play.api.http.LazyHttpErrorHandler

  private var _prefix = "/"

  def withPrefix(prefix: String): Routes = @ob
    _prefix = prefix
    @(pkg.getOrElse("_routes_")).RoutesPrefix.setPrefix(prefix)
    @for((include @ Include(path, router), index) <- rules.zipWithIndex.collect({ case (i: Include, index) => (i, index) })) {
    @markLines(include)
    @routerIdentifier(include, index) = Include(@(router).withPrefix(prefix + (if (prefix.endsWith("/")) "" else "/") + "@path"))}
    this
  @cb

  def prefix: String = _prefix

  lazy val defaultPrefix: String = {
    if (this.prefix.endsWith("/")) "" else "/"
  }

  def documentation: Seq[(String, String, String)] = List(@for((rule, index) <- rules.zipWithIndex) {
    @rule match {
      case Route(verb, path, call, _, _) if path.parts.isEmpty => {(@tq@verb@tq, prefix, @tq@call@tq)}
      case Route(verb, path, call, _, _) => {(@tq@verb@tq, prefix + (if(prefix.endsWith("/")) "" else "/") + @encodeStringConstant(path.toString), @tq@call@tq)}
      case include: Include => {@(routerIdentifier(include, index)).router.documentation}
  },}
    Nil
  ).foldLeft(List.empty[(String,String,String)]) { (s,e) => e.asInstanceOf[Any] match {
    case r @@ (_,_,_) => s :+ r.asInstanceOf[(String,String,String)]
    case l => s ++ l.asInstanceOf[List[(String,String,String)]]
  }}

@for(rule <- rules.zipWithIndex){@rule match {
case (route @ Route(verb, path, call, comments, modifiers), index) => {
  @markLines(route)
  private[this] lazy val @routeIdentifier(route, index): Route.ParamsExtractor = Route("@verb.value",
    PathPattern(List(StaticPart(this.prefix)@if(path.parts.nonEmpty) {, StaticPart(this.defaultPrefix), }@path.parts.map(_.toString).mkString(", ")))
  )
  private[this] lazy val @invokerIdentifier(route, index) = createInvoker(
    @controllerMethodCall(route, p => s"fakeValue[${p.typeName}]"),
    HandlerDef(this.getClass.getClassLoader,
      "@for(p <- pkg) {@p}",
      "@(call.packageName).@call.controller",
      "@call.method",
      @call.parameters.filterNot(_.isEmpty).map(params => params.map("classOf[" + _.typeName + "]").mkString(", ")).map("Seq(" + _ + ")").getOrElse("Nil"),
      "@verb",
      this.prefix + @encodeStringConstant(path.toString),
      @encodeStringConstant(comments.map(_.comment).mkString("\n")),
      Seq(@modifiers.map(_.value).map(encodeStringConstant).mkString(", "))
    )
  )
}
case (include @ Include(path, router), index) => {
  @markLines(include)
  @@volatile private[this] var @routerIdentifier(include, index) = Include(@(router).withPrefix(prefix + (if(prefix.endsWith("/")) "" else "/") + "@path"))
}}}

  def routes: PartialFunction[RequestHeader, Handler] = {
  @if(rules.isEmpty) {
    Map.empty
  } else {@for(rule <- rules.zipWithIndex){@rule match {
  case (include: Include, index) => {
    @markLines(include)
    case @(routerIdentifier(include, index))(handler) => handler
  }
  case (route: Route, index) => {
    @markLines(route)
    case @(routeIdentifier(route, index))(params@@_) =>
      call@(routeBinding(route)) @ob @localNames(route)
        @(invokerIdentifier(route, index)).call(@controllerMethodCall(route, x => safeKeyword(x.name)))
      @cb
  }
  }}}}
}
