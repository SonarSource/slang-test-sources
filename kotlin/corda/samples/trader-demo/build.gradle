apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'maven-publish'

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // The trader demo CorDapp depends upon Cash CorDapp features
    cordapp project(':finance')

    // Corda integration dependencies
    cordaCompile project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaCompile project(path: ":webserver:webcapsule", configuration: 'runtimeArtifacts')
    cordaCompile project(':core')

    // Corda Plugins: dependent flows and services
    cordapp project(':samples:bank-of-corda-demo')

    testCompile project(':test-utils')
    testCompile "junit:junit:$junit_version"
    testCompile "org.assertj:assertj-core:${assertj_version}"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    ext.rpcUsers = [['username': "demo", 'password': "demo", 'permissions': ["ALL"]]]

    directory "./build/nodes"
    // This name "Notary" is hard-coded into TraderDemoClientApi so if you change it here, change it there too.
    node {
        name "O=Notary Service,L=Zurich,C=CH"
        notary = [validating : true]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
        cordapps = ["$project.group:finance:$corda_release_version"]
    }
    node {
        name "O=Bank A,L=London,C=GB"
        p2pPort 10005
        cordapps = ["$project.group:finance:$corda_release_version"]
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10007"
        }
    }
    node {
        name "O=Bank B,L=New York,C=US"
        p2pPort 10008
        cordapps = ["$project.group:finance:$corda_release_version"]
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10010"
        }
    }
    node {
        name "O=BankOfCorda,L=New York,C=US"
        p2pPort 10011
        cordapps = ["$project.group:finance:$corda_release_version"]
        rpcUsers = ext.rpcUsers
        rpcSettings {
            address "localhost:10012"
            adminAddress "localhost:10013"
        }
    }
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

publishing {
    publications {
        jarAndSources(MavenPublication) {
            from components.java
            artifactId 'traderdemo'

            artifact sourceJar
            artifact javadocJar
        }
    }
}

task runBank(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'BANK'
}

task runSeller(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'net.corda.traderdemo.TraderDemoKt'
    args '--role'
    args 'SELLER'
}

jar {
    manifest {
        attributes(
                'Automatic-Module-Name': 'net.corda.samples.demos.trader'
        )
    }
}