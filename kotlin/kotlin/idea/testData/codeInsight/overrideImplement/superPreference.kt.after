abstract class A : I1 {
    open fun a(){}
}

interface I1 {
    fun i1()
    fun i()
}

interface I2 {
    fun i2()
    fun a()
}

interface I3 {
    fun i()
}

abstract class B : I2, A(), I3 {
    override fun a() {
        <selection><caret>super.a()</selection>
    }

    override fun equals(other: Any?): Boolean {
        return super.equals(other)
    }

    override fun hashCode(): Int {
        return super.hashCode()
    }

    override fun i() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun i1() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun i2() {
        TODO("not implemented") //To change body of created functions use File | Settings | File Templates.
    }

    override fun toString(): String {
        return super.toString()
    }
}
