== foo ==
fun foo() {
    val a = 1
    val f = { x: Int ->
        val y = x + a
        use(a)
    }
}
---------------------
1                                    <v0>: Int                             NEW: r(1) -> <v0>
{ x: Int -> val y = x + a use(a) }   <v1>: {<: (Int) -> Array<out Any?>}   NEW: r({ x: Int -> val y = x + a use(a) }) -> <v1>
=====================
== anonymous_0 ==
{ x: Int ->
        val y = x + a
        use(a)
    }
---------------------
                       <v0>: Int                    NEW: magic[FAKE_INITIALIZER](x: Int) -> <v0>
x                      <v1>: Int                    NEW: r(x) -> <v1>
a                      <v2>: Int                    NEW: r(a) -> <v2>
x + a                  <v3>: Int                    NEW: call(x + a, plus|<v1>, <v2>) -> <v3>
a                      <v4>: *                      NEW: r(a) -> <v4>
use(a)                 <v5>: {<: Array<out Any?>}   NEW: call(use(a), use|<v4>) -> <v5>
val y = x + a use(a)   <v5>: {<: Array<out Any?>}   COPY
=====================
== use ==
fun use(vararg a: Any?) = a
---------------------
    <v0>: {<: Array<out Any?>}   NEW: magic[FAKE_INITIALIZER](vararg a: Any?) -> <v0>
a   <v1>: {<: Array<out Any?>}   NEW: r(a) -> <v1>
=====================
