== foo ==
fun foo() {
    "before"
    try {
        foo()
    }
    catch (e: Exception) {
        val a = e
    }
    finally {
        val a = 1
    }
    "after"
}
---------------------
                                                                                              <v2>: {<: Exception /* = Exception */}   NEW: magic[FAKE_INITIALIZER](e: Exception) -> <v2>
"before"                                                                                      <v0>: *                                  NEW: r("before") -> <v0>
foo()                                                                                         <v1>: *                                  NEW: call(foo(), foo) -> <v1>
{ foo() }                                                                                     <v1>: *                                  COPY
e                                                                                             <v3>: {<: Exception /* = Exception */}   NEW: r(e) -> <v3>
{ val a = e }                                                                                 !<v5>: *
1                                                                                             <v4>: Int                                NEW: r(1) -> <v4>
try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }                        <v6>: *                                  NEW: merge(try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 }|<v1>, !<v5>) -> <v6>
"after"                                                                                       <v7>: *                                  NEW: r("after") -> <v7>
{ "before" try { foo() } catch (e: Exception) { val a = e } finally { val a = 1 } "after" }   <v7>: *                                  COPY
=====================
