package test

public open class Rendering {
    public constructor Rendering()

    public/*package*/ open inner class A_Plain {
        public/*package*/ constructor A_Plain()
    }

    public/*package*/ open inner class B_Super {
        public/*package*/ constructor B_Super()
    }

    public/*package*/ open inner class C_Sub : test.Rendering.B_Super {
        public/*package*/ constructor C_Sub()
    }

    public/*package*/ open inner class D_SuperG</*0*/ T : kotlin.Any!> {
        public/*package*/ constructor D_SuperG</*0*/ T : kotlin.Any!>()
    }

    public/*package*/ open inner class E_SubG : test.Rendering.D_SuperG<kotlin.String!> {
        public/*package*/ constructor E_SubG()
    }

    public/*package*/ interface F_Array {
        public abstract fun foo1(/*0*/ p0: kotlin.Array<(out) kotlin.String!>!): kotlin.Unit
        public abstract fun foo2(/*0*/ p0: kotlin.Array<(out) kotlin.collections.(Mutable)List<kotlin.String!>!>!): kotlin.Unit
        public abstract fun foo3(/*0*/ vararg p0: kotlin.Int! /*kotlin.Array<(out) kotlin.Int!>!*/): kotlin.Unit
        public abstract fun foo4(/*0*/ vararg p0: kotlin.String! /*kotlin.Array<(out) kotlin.String!>!*/): kotlin.Unit
        public abstract fun foo5(/*0*/ vararg p0: kotlin.collections.(Mutable)List<kotlin.String!>! /*kotlin.Array<(out) kotlin.collections.(Mutable)List<kotlin.String!>!>!*/): kotlin.Unit
    }

    public/*package*/ interface G_Collections {
        public abstract fun foo1(/*0*/ p0: kotlin.collections.(Mutable)Iterator<kotlin.String!>!): kotlin.Unit
        public abstract fun foo2(/*0*/ p0: kotlin.collections.(Mutable)Iterable<kotlin.String!>!): kotlin.Unit
        public abstract fun foo3(/*0*/ p0: kotlin.collections.(Mutable)Collection<kotlin.String!>!): kotlin.Unit
        public abstract fun foo4(/*0*/ p0: kotlin.collections.(Mutable)List<kotlin.String!>!): kotlin.Unit
        public abstract fun foo5(/*0*/ p0: kotlin.collections.(Mutable)Set<kotlin.String!>!): kotlin.Unit
        public abstract fun foo6(/*0*/ p0: kotlin.collections.(Mutable)Map<kotlin.String!, kotlin.String!>!): kotlin.Unit
        public abstract fun foo7(/*0*/ p0: kotlin.collections.(Mutable)Map.(Mutable)Entry<kotlin.String!, kotlin.String!>!): kotlin.Unit
    }

    public/*package*/ interface H_Raw {
        public abstract fun foo1(/*0*/ p0: kotlin.collections.(Mutable)List<(raw) kotlin.Any?>!): kotlin.Unit
        public abstract fun foo2(/*0*/ p0: test.Rendering.D_SuperG<(raw) kotlin.Any!>!): kotlin.Unit
    }

    public/*package*/ interface I_Wildcard {
        public abstract fun foo1(/*0*/ p0: (kotlin.collections.MutableList<out kotlin.String!>..kotlin.collections.List<kotlin.String!>?)): kotlin.Unit
        public abstract fun foo2(/*0*/ p0: kotlin.collections.MutableList<in kotlin.String!>!): kotlin.Unit
        public abstract fun foo3(/*0*/ p0: kotlin.collections.(Mutable)List<*>!): kotlin.Unit
        public abstract fun foo4(/*0*/ p0: test.Rendering.D_SuperG<out kotlin.String!>!): kotlin.Unit
        public abstract fun foo5(/*0*/ p0: test.Rendering.D_SuperG<in kotlin.String!>!): kotlin.Unit
        public abstract fun foo6(/*0*/ p0: test.Rendering.D_SuperG<*>!): kotlin.Unit
    }
}
