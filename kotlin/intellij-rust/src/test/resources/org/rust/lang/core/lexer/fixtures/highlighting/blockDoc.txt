<DOC_TEXT> ('/*! ')
<DOC_HEADING> ('# Iterator')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  The heart and soul of this module is the ')
<DOC_REF_LINK> ('[`Iterator`]')
WHITE_SPACE (' ')
<DOC_TEXT> ('trait. The core of')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_REF_LINK> ('[`Iterator`]')
WHITE_SPACE (' ')
<DOC_TEXT> ('looks like this:')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_CODE_FENCE> ('```')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
<DOC_CODE_FENCE> ('  trait Iterator {')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
<DOC_CODE_FENCE> ('      type Item;')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
<DOC_CODE_FENCE> ('      fn next(&mut self) -> Option<Self::Item>;')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
<DOC_CODE_FENCE> ('  }')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
<DOC_CODE_FENCE> ('  ```')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  An iterator has a method, ')
<DOC_REF_LINK> ('[`next()`]')
<DOC_TEXT> (', which when called, returns an')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_REF_LINK> ('[`Option`]')
<DOC_CODE_SPAN> ('`<Item>`')
<DOC_TEXT> ('. ')
<DOC_REF_LINK> ('[`next()`]')
WHITE_SPACE (' ')
<DOC_TEXT> ('will return ')
<DOC_CODE_SPAN> ('`Some(Item)`')
WHITE_SPACE (' ')
<DOC_TEXT> ('as long as there')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  are elements, and once they've all been exhausted, will return ')
<DOC_CODE_SPAN> ('`None`')
WHITE_SPACE (' ')
<DOC_TEXT> ('to')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  indicate that iteration is finished. Individual iterators may choose to')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  resume iteration, and so calling ')
<DOC_REF_LINK> ('[`next()`]')
WHITE_SPACE (' ')
<DOC_TEXT> ('again may or may not eventually')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  start returning ')
<DOC_CODE_SPAN> ('`Some(Item)`')
WHITE_SPACE (' ')
<DOC_TEXT> ('again at some point.')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_REF_LINK> ('[`Iterator`]')
<DOC_TEXT> (''s full definition includes a number of other methods as well,')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  but they are default methods, built on top of ')
<DOC_REF_LINK> ('[`next()`]')
<DOC_TEXT> (', and so you get')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  them for free.')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  Iterators are also composable, and it's common to chain them together to do')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  more complex forms of processing. See the ')
<DOC_INLINE_LINK> ('[Adapters](#adapters)')
WHITE_SPACE (' ')
<DOC_TEXT> ('section')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  below for more details.')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_LINK_REF_DEF> ('[`Iterator`]: trait.Iterator.html')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_LINK_REF_DEF> ('[`next()`]: trait.Iterator.html#tymethod.next')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*  ')
<DOC_LINK_REF_DEF> ('[`Option`]: ../../std/option/enum.Option.html')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*/')
WHITE_SPACE ('\n\n')
<DOC_TEXT> ('/**The ')
<DOC_CODE_SPAN> ('`Option`')
WHITE_SPACE (' ')
<DOC_TEXT> ('type. See ')
<DOC_INLINE_LINK> ('[the module level documentation](index.html)')
WHITE_SPACE (' ')
<DOC_TEXT> ('for more.*/')
WHITE_SPACE ('\n\n    ')
<DOC_TEXT> ('/** Lorem ipsum dolor sit amet, consectetur adipiscing elit,')
WHITE_SPACE ('\n     ')
<DOC_TEXT> ('*   sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.')
WHITE_SPACE ('\n     ')
<DOC_TEXT> ('*   Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris')
WHITE_SPACE ('\n     ')
<DOC_TEXT> ('*   nisi ut aliquip ex ea commodo consequat.')
WHITE_SPACE ('\n     ')
<DOC_TEXT> ('*/')
WHITE_SPACE ('\n\n')
<DOC_TEXT> ('/**')
WHITE_SPACE ('\n    ')
<DOC_TEXT> ('missing asterisk')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*/')
WHITE_SPACE ('\n\n')
<DOC_TEXT> ('/**')
WHITE_SPACE ('\n    ')
<DOC_CODE_FENCE> ('```')
WHITE_SPACE ('\n    ')
<DOC_CODE_FENCE> ('missing asterisk')
WHITE_SPACE ('\n    ')
<DOC_CODE_FENCE> ('```')
WHITE_SPACE ('\n ')
<DOC_TEXT> ('*/')
