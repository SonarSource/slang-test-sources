<EOL_COMMENT> ('// False positive found during code review')
WHITE_SPACE ('\n')
let ('let')
WHITE_SPACE (' ')
identifier ('comment')
WHITE_SPACE (' ')
= ('=')
WHITE_SPACE (' ')
identifier ('Regex')
:: ('::')
identifier ('new')
( ('(')
RAW_STRING_LITERAL ('r"(?m)^\s*//.*$"')
) (')')
. ('.')
identifier ('unwrap')
( ('(')
) (')')
; (';')
WHITE_SPACE ('\n\n\n')
<EOL_COMMENT> ('// From https://doc.rust-lang.org/reference.html#raw-string-literals')
WHITE_SPACE ('\n')
STRING_LITERAL ('"foo"')
; (';')
WHITE_SPACE (' ')
RAW_STRING_LITERAL ('r"foo"')
; (';')
WHITE_SPACE ('                     ')
<EOL_COMMENT> ('// foo')
WHITE_SPACE ('\n')
STRING_LITERAL ('"')
VALID_STRING_ESCAPE_TOKEN ('\"')
STRING_LITERAL ('foo')
VALID_STRING_ESCAPE_TOKEN ('\"')
STRING_LITERAL ('"')
; (';')
WHITE_SPACE (' ')
RAW_STRING_LITERAL ('r#""foo""#')
; (';')
WHITE_SPACE ('             ')
<EOL_COMMENT> ('// "foo"')
WHITE_SPACE ('\n\n')
STRING_LITERAL ('"foo #')
VALID_STRING_ESCAPE_TOKEN ('\"')
STRING_LITERAL ('# bar"')
; (';')
WHITE_SPACE ('\n')
RAW_STRING_LITERAL ('r##"foo #"# bar"##')
; (';')
WHITE_SPACE ('                ')
<EOL_COMMENT> ('// foo #"# bar')
WHITE_SPACE ('\n\n')
STRING_LITERAL ('"')
VALID_STRING_ESCAPE_TOKEN ('\x52')
STRING_LITERAL ('"')
; (';')
WHITE_SPACE (' ')
STRING_LITERAL ('"R"')
; (';')
WHITE_SPACE (' ')
RAW_STRING_LITERAL ('r"R"')
; (';')
WHITE_SPACE ('                 ')
<EOL_COMMENT> ('// R')
WHITE_SPACE ('\n')
STRING_LITERAL ('"')
VALID_STRING_ESCAPE_TOKEN ('\\')
STRING_LITERAL ('x52"')
; (';')
WHITE_SPACE (' ')
RAW_STRING_LITERAL ('r"\x52"')
; (';')
WHITE_SPACE ('                  ')
<EOL_COMMENT> ('// \x52')
WHITE_SPACE ('\n\n\n')
<EOL_COMMENT> ('// From https://doc.rust-lang.org/reference.html#raw-byte-string-literals')
WHITE_SPACE ('\n')
BYTE_STRING_LITERAL ('b"foo"')
; (';')
WHITE_SPACE (' ')
RAW_BYTE_STRING_LITERAL ('br"foo"')
; (';')
WHITE_SPACE ('                     ')
<EOL_COMMENT> ('// foo')
WHITE_SPACE ('\n')
BYTE_STRING_LITERAL ('b"')
VALID_STRING_ESCAPE_TOKEN ('\"')
BYTE_STRING_LITERAL ('foo')
VALID_STRING_ESCAPE_TOKEN ('\"')
BYTE_STRING_LITERAL ('"')
; (';')
WHITE_SPACE (' ')
RAW_BYTE_STRING_LITERAL ('br#""foo""#')
; (';')
WHITE_SPACE ('             ')
<EOL_COMMENT> ('// "foo"')
WHITE_SPACE ('\n\n')
BYTE_STRING_LITERAL ('b"foo #')
VALID_STRING_ESCAPE_TOKEN ('\"')
BYTE_STRING_LITERAL ('# bar"')
; (';')
WHITE_SPACE ('\n')
RAW_BYTE_STRING_LITERAL ('br##"foo #"# bar"##')
; (';')
WHITE_SPACE ('                 ')
<EOL_COMMENT> ('// foo #"# bar')
WHITE_SPACE ('\n\n')
BYTE_STRING_LITERAL ('b"')
VALID_STRING_ESCAPE_TOKEN ('\x52')
BYTE_STRING_LITERAL ('"')
; (';')
WHITE_SPACE (' ')
BYTE_STRING_LITERAL ('b"R"')
; (';')
WHITE_SPACE (' ')
RAW_BYTE_STRING_LITERAL ('br"R"')
; (';')
WHITE_SPACE ('                ')
<EOL_COMMENT> ('// R')
WHITE_SPACE ('\n')
BYTE_STRING_LITERAL ('b"')
VALID_STRING_ESCAPE_TOKEN ('\\')
BYTE_STRING_LITERAL ('x52"')
; (';')
WHITE_SPACE (' ')
RAW_BYTE_STRING_LITERAL ('br"\x52"')
; (';')
WHITE_SPACE ('                  ')
<EOL_COMMENT> ('// \x52')
